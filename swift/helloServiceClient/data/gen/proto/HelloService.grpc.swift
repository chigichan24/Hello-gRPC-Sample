//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: proto/HelloService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Pb_HelloServiceClient`, then call methods of this protocol to make API calls.
public protocol Pb_HelloServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Pb_HelloServiceClientInterceptorFactoryProtocol? { get }

  func hello(
    _ request: Pb_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_HelloRequest, Pb_HelloResponse>

  func crypto(
    _ request: Pb_CryptoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Pb_CryptoRequest, Pb_CryptoResponse>
}

extension Pb_HelloServiceClientProtocol {
  public var serviceName: String {
    return "pb.HelloService"
  }

  /// Unary call to Hello
  ///
  /// - Parameters:
  ///   - request: Request to send to Hello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func hello(
    _ request: Pb_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_HelloRequest, Pb_HelloResponse> {
    return self.makeUnaryCall(
      path: "/pb.HelloService/Hello",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHelloInterceptors() ?? []
    )
  }

  /// Unary call to Crypto
  ///
  /// - Parameters:
  ///   - request: Request to send to Crypto.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func crypto(
    _ request: Pb_CryptoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Pb_CryptoRequest, Pb_CryptoResponse> {
    return self.makeUnaryCall(
      path: "/pb.HelloService/Crypto",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCryptoInterceptors() ?? []
    )
  }
}

public protocol Pb_HelloServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'hello'.
  func makeHelloInterceptors() -> [ClientInterceptor<Pb_HelloRequest, Pb_HelloResponse>]

  /// - Returns: Interceptors to use when invoking 'crypto'.
  func makeCryptoInterceptors() -> [ClientInterceptor<Pb_CryptoRequest, Pb_CryptoResponse>]
}

public final class Pb_HelloServiceClient: Pb_HelloServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Pb_HelloServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the pb.HelloService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Pb_HelloServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public final class Pb_HelloServiceTestClient: Pb_HelloServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Pb_HelloServiceClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: Pb_HelloServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the Hello RPC. This must be called
  /// before calling 'hello'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeHelloResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Pb_HelloRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Pb_HelloRequest, Pb_HelloResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/pb.HelloService/Hello", requestHandler: requestHandler)
  }

  public func enqueueHelloResponse(
    _ response: Pb_HelloResponse,
    _ requestHandler: @escaping (FakeRequestPart<Pb_HelloRequest>) -> () = { _ in }
  )  {
    let stream = self.makeHelloResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Hello'
  public var hasHelloResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/pb.HelloService/Hello")
  }

  /// Make a unary response for the Crypto RPC. This must be called
  /// before calling 'crypto'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeCryptoResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Pb_CryptoRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Pb_CryptoRequest, Pb_CryptoResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/pb.HelloService/Crypto", requestHandler: requestHandler)
  }

  public func enqueueCryptoResponse(
    _ response: Pb_CryptoResponse,
    _ requestHandler: @escaping (FakeRequestPart<Pb_CryptoRequest>) -> () = { _ in }
  )  {
    let stream = self.makeCryptoResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'Crypto'
  public var hasCryptoResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/pb.HelloService/Crypto")
  }
}

